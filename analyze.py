"""Wrapper around the OpenAI Python SDK to analyze PubMed abstracts.

This module provides a simple function for sending a batch of abstracts to
an OpenAI Chat completion endpoint. It trims the input based on the
model's approximate context window and constructs a prompt suitable for
identifying biotech opportunities in the literature.
"""

import os
import httpx
from openai import OpenAI
from openai import APIError, AuthenticationError, RateLimitError, APIConnectionError

__all__ = ["analyze_abstracts"]


# Approximate character caps per model to stay within context window
MODEL_CHAR_CAP = {
    "gpt-4o-mini": 80_000,
    "gpt-4o": 120_000,
}


def analyze_abstracts(abstracts_text: str, model: str = "gpt-4o-mini") -> str:
    """Send a series of abstracts to the OpenAI API for opportunity analysis.

    Parameters
    ----------
    abstracts_text : str
        Plain text containing one or more PubMed abstracts.
    model : str, optional
        The OpenAI Chat model to use (default is "gpt-4o-mini").

    Returns
    -------
    str
        The analysis response generated by the model, or a user-friendly error
        message if the request fails.
    """
    # Retrieve the API key from environment variables
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return (
            "[Configuration error] OPENAI_API_KEY is not set on the web service. "
            "Please add it as an environment variable and redeploy."
        )

    # Construct the OpenAI client with explicit base URL and a reasonable timeout
    base_url = os.getenv("OPENAI_BASE_URL", "https://api.openai.com/v1")
    # Use a custom httpx client: disable HTTP/2, set timeout, verify certificates.  
    # This helps avoid network negotiation issues on some hosts (e.g., Railway).
    http_client = httpx.Client(http2=False, timeout=60.0, verify=True)
    client = OpenAI(api_key=api_key, base_url=base_url, http_client=http_client)

    # Ensure we don't exceed the model context by trimming the input
    cap = MODEL_CHAR_CAP.get(model, MODEL_CHAR_CAP.get("gpt-4o-mini", 80_000))
    snippet = abstracts_text[:cap]

    # Prepare system and user prompts
    system_prompt = (
        "You are a biotech venture analyst. Given recent PubMed abstracts, "
        "identify potential pipeline expansion and newco opportunities. "
        "Summarize themes, modalities, targets, validation level, "
        "differentiation vs. standard of care, and partnering angles."
    )
    user_prompt = (
        "Analyze the following abstracts (focus on novelty, tractability, and commercial potential). "
        "Return: (1) bullet summary of themes; (2) ranked short-list of 3–5 opportunities with rationale.\n\n"
        + snippet
    )

    # Attempt to call the OpenAI chat completion endpoint with basic retry for transient network errors
    for attempt in range(2):
        try:
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.2,
            )
            return response.choices[0].message.content.strip()
        except AuthenticationError as e:
            # Authentication errors often signal an invalid API key
            return f"[Authentication error] {str(e)}"
        except RateLimitError as e:
            # Rate limit errors may be transient; on second attempt, propagate the message
            if attempt == 0:
                continue
            return f"[Rate limit error] {str(e)}"
        except APIConnectionError as e:
            # Connectivity issues; inform the user rather than crash
            if attempt == 0:
                continue
            return (
                f"[Connection error] Unable to reach the OpenAI API at {base_url}. "
                "Please verify network connectivity and ensure the base URL is correct. "
                f"Error details: {e}"
            )
        except httpx.HTTPError as e:
            # Low-level HTTP errors from httpx; treat similar to connection issues
            if attempt == 0:
                continue
            return (
                f"[Network error] An HTTP error occurred while contacting the OpenAI API: {e}. "
                "This may indicate a DNS or TLS issue."
            )
        except APIError as e:
            # Generic API errors, such as invalid requests or context limits
            msg = str(e)
            # If the message hints at input too long, shorten the snippet and retry once
            if ("context" in msg.lower() or "too many" in msg.lower()) and attempt == 0:
                # Trim further and retry
                snippet = abstracts_text[: min(cap // 2, len(abstracts_text))]
                user_prompt = (
                    "Analyze the following abstracts (focus on novelty, tractability, and commercial potential). "
                    "Return: (1) bullet summary of themes; (2) ranked short-list of 3–5 opportunities with rationale.\n\n"
                    + snippet
                )
                continue
            return f"[API error] {msg}"
        except Exception as e:
            # Unexpected errors; provide details for debugging
            if attempt == 0:
                continue
            return f"[Unexpected error] {str(e)}"

    return "[Error] Failed to obtain analysis after multiple attempts."